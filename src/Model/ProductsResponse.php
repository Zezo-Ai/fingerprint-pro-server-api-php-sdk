<?php
/**
 * ProductsResponse.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fingerprint Pro Server API.
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fingerprint\ServerAPI\Model;

use Fingerprint\ServerAPI\ObjectSerializer;

/**
 * ProductsResponse Class Doc Comment.
 *
 * @category Class
 *
 * @description Contains all information about the request identified by `requestId`, depending on the pricing plan (Pro, Pro Plus, Enterprise)
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ProductsResponse implements ModelInterface, \ArrayAccess
{
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ProductsResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'identification' => '\Fingerprint\ServerAPI\Model\ProductsResponseIdentification',
        'botd' => '\Fingerprint\ServerAPI\Model\ProductsResponseBotd',
        'ip_info' => '\Fingerprint\ServerAPI\Model\SignalResponseIpInfo',
        'incognito' => '\Fingerprint\ServerAPI\Model\SignalResponseIncognito',
        'root_apps' => '\Fingerprint\ServerAPI\Model\SignalResponseRootApps',
        'emulator' => '\Fingerprint\ServerAPI\Model\SignalResponseEmulator',
        'cloned_app' => '\Fingerprint\ServerAPI\Model\SignalResponseClonedApp',
        'factory_reset' => '\Fingerprint\ServerAPI\Model\SignalResponseFactoryReset',
        'jailbroken' => '\Fingerprint\ServerAPI\Model\SignalResponseJailbroken',
        'frida' => '\Fingerprint\ServerAPI\Model\SignalResponseFrida',
        'ip_blocklist' => '\Fingerprint\ServerAPI\Model\SignalResponseIpBlocklist',
        'tor' => '\Fingerprint\ServerAPI\Model\SignalResponseTor',
        'privacy_settings' => '\Fingerprint\ServerAPI\Model\SignalResponsePrivacySettings',
        'virtual_machine' => '\Fingerprint\ServerAPI\Model\SignalResponseVirtualMachine',
        'vpn' => '\Fingerprint\ServerAPI\Model\SignalResponseVpn',
        'proxy' => '\Fingerprint\ServerAPI\Model\SignalResponseProxy',
        'tampering' => '\Fingerprint\ServerAPI\Model\SignalResponseTampering',
        'high_activity' => '\Fingerprint\ServerAPI\Model\SignalResponseHighActivity',
        'location_spoofing' => '\Fingerprint\ServerAPI\Model\SignalResponseLocationSpoofing',
        'suspect_score' => '\Fingerprint\ServerAPI\Model\SignalResponseSuspectScore',
        'raw_device_attributes' => '\Fingerprint\ServerAPI\Model\SignalResponseRawDeviceAttributes'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'identification' => null,
        'botd' => null,
        'ip_info' => null,
        'incognito' => null,
        'root_apps' => null,
        'emulator' => null,
        'cloned_app' => null,
        'factory_reset' => null,
        'jailbroken' => null,
        'frida' => null,
        'ip_blocklist' => null,
        'tor' => null,
        'privacy_settings' => null,
        'virtual_machine' => null,
        'vpn' => null,
        'proxy' => null,
        'tampering' => null,
        'high_activity' => null,
        'location_spoofing' => null,
        'suspect_score' => null,
        'raw_device_attributes' => null];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identification' => 'identification',
        'botd' => 'botd',
        'ip_info' => 'ipInfo',
        'incognito' => 'incognito',
        'root_apps' => 'rootApps',
        'emulator' => 'emulator',
        'cloned_app' => 'clonedApp',
        'factory_reset' => 'factoryReset',
        'jailbroken' => 'jailbroken',
        'frida' => 'frida',
        'ip_blocklist' => 'ipBlocklist',
        'tor' => 'tor',
        'privacy_settings' => 'privacySettings',
        'virtual_machine' => 'virtualMachine',
        'vpn' => 'vpn',
        'proxy' => 'proxy',
        'tampering' => 'tampering',
        'high_activity' => 'highActivity',
        'location_spoofing' => 'locationSpoofing',
        'suspect_score' => 'suspectScore',
        'raw_device_attributes' => 'rawDeviceAttributes'];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'identification' => 'setIdentification',
        'botd' => 'setBotd',
        'ip_info' => 'setIpInfo',
        'incognito' => 'setIncognito',
        'root_apps' => 'setRootApps',
        'emulator' => 'setEmulator',
        'cloned_app' => 'setClonedApp',
        'factory_reset' => 'setFactoryReset',
        'jailbroken' => 'setJailbroken',
        'frida' => 'setFrida',
        'ip_blocklist' => 'setIpBlocklist',
        'tor' => 'setTor',
        'privacy_settings' => 'setPrivacySettings',
        'virtual_machine' => 'setVirtualMachine',
        'vpn' => 'setVpn',
        'proxy' => 'setProxy',
        'tampering' => 'setTampering',
        'high_activity' => 'setHighActivity',
        'location_spoofing' => 'setLocationSpoofing',
        'suspect_score' => 'setSuspectScore',
        'raw_device_attributes' => 'setRawDeviceAttributes'];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'identification' => 'getIdentification',
        'botd' => 'getBotd',
        'ip_info' => 'getIpInfo',
        'incognito' => 'getIncognito',
        'root_apps' => 'getRootApps',
        'emulator' => 'getEmulator',
        'cloned_app' => 'getClonedApp',
        'factory_reset' => 'getFactoryReset',
        'jailbroken' => 'getJailbroken',
        'frida' => 'getFrida',
        'ip_blocklist' => 'getIpBlocklist',
        'tor' => 'getTor',
        'privacy_settings' => 'getPrivacySettings',
        'virtual_machine' => 'getVirtualMachine',
        'vpn' => 'getVpn',
        'proxy' => 'getProxy',
        'tampering' => 'getTampering',
        'high_activity' => 'getHighActivity',
        'location_spoofing' => 'getLocationSpoofing',
        'suspect_score' => 'getSuspectScore',
        'raw_device_attributes' => 'getRawDeviceAttributes'];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['botd'] = isset($data['botd']) ? $data['botd'] : null;
        $this->container['ip_info'] = isset($data['ip_info']) ? $data['ip_info'] : null;
        $this->container['incognito'] = isset($data['incognito']) ? $data['incognito'] : null;
        $this->container['root_apps'] = isset($data['root_apps']) ? $data['root_apps'] : null;
        $this->container['emulator'] = isset($data['emulator']) ? $data['emulator'] : null;
        $this->container['cloned_app'] = isset($data['cloned_app']) ? $data['cloned_app'] : null;
        $this->container['factory_reset'] = isset($data['factory_reset']) ? $data['factory_reset'] : null;
        $this->container['jailbroken'] = isset($data['jailbroken']) ? $data['jailbroken'] : null;
        $this->container['frida'] = isset($data['frida']) ? $data['frida'] : null;
        $this->container['ip_blocklist'] = isset($data['ip_blocklist']) ? $data['ip_blocklist'] : null;
        $this->container['tor'] = isset($data['tor']) ? $data['tor'] : null;
        $this->container['privacy_settings'] = isset($data['privacy_settings']) ? $data['privacy_settings'] : null;
        $this->container['virtual_machine'] = isset($data['virtual_machine']) ? $data['virtual_machine'] : null;
        $this->container['vpn'] = isset($data['vpn']) ? $data['vpn'] : null;
        $this->container['proxy'] = isset($data['proxy']) ? $data['proxy'] : null;
        $this->container['tampering'] = isset($data['tampering']) ? $data['tampering'] : null;
        $this->container['high_activity'] = isset($data['high_activity']) ? $data['high_activity'] : null;
        $this->container['location_spoofing'] = isset($data['location_spoofing']) ? $data['location_spoofing'] : null;
        $this->container['suspect_score'] = isset($data['suspect_score']) ? $data['suspect_score'] : null;
        $this->container['raw_device_attributes'] = isset($data['raw_device_attributes']) ? $data['raw_device_attributes'] : null;
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets identification.
     *
     * @return ProductsResponseIdentification
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification.
     *
     * @param ProductsResponseIdentification $identification identification
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets botd.
     *
     * @return ProductsResponseBotd
     */
    public function getBotd()
    {
        return $this->container['botd'];
    }

    /**
     * Sets botd.
     *
     * @param ProductsResponseBotd $botd botd
     *
     * @return $this
     */
    public function setBotd($botd)
    {
        $this->container['botd'] = $botd;

        return $this;
    }

    /**
     * Gets ip_info.
     *
     * @return SignalResponseIpInfo
     */
    public function getIpInfo()
    {
        return $this->container['ip_info'];
    }

    /**
     * Sets ip_info.
     *
     * @param SignalResponseIpInfo $ip_info ip_info
     *
     * @return $this
     */
    public function setIpInfo($ip_info)
    {
        $this->container['ip_info'] = $ip_info;

        return $this;
    }

    /**
     * Gets incognito.
     *
     * @return SignalResponseIncognito
     */
    public function getIncognito()
    {
        return $this->container['incognito'];
    }

    /**
     * Sets incognito.
     *
     * @param SignalResponseIncognito $incognito incognito
     *
     * @return $this
     */
    public function setIncognito($incognito)
    {
        $this->container['incognito'] = $incognito;

        return $this;
    }

    /**
     * Gets root_apps.
     *
     * @return SignalResponseRootApps
     */
    public function getRootApps()
    {
        return $this->container['root_apps'];
    }

    /**
     * Sets root_apps.
     *
     * @param SignalResponseRootApps $root_apps root_apps
     *
     * @return $this
     */
    public function setRootApps($root_apps)
    {
        $this->container['root_apps'] = $root_apps;

        return $this;
    }

    /**
     * Gets emulator.
     *
     * @return SignalResponseEmulator
     */
    public function getEmulator()
    {
        return $this->container['emulator'];
    }

    /**
     * Sets emulator.
     *
     * @param SignalResponseEmulator $emulator emulator
     *
     * @return $this
     */
    public function setEmulator($emulator)
    {
        $this->container['emulator'] = $emulator;

        return $this;
    }

    /**
     * Gets cloned_app.
     *
     * @return SignalResponseClonedApp
     */
    public function getClonedApp()
    {
        return $this->container['cloned_app'];
    }

    /**
     * Sets cloned_app.
     *
     * @param SignalResponseClonedApp $cloned_app cloned_app
     *
     * @return $this
     */
    public function setClonedApp($cloned_app)
    {
        $this->container['cloned_app'] = $cloned_app;

        return $this;
    }

    /**
     * Gets factory_reset.
     *
     * @return SignalResponseFactoryReset
     */
    public function getFactoryReset()
    {
        return $this->container['factory_reset'];
    }

    /**
     * Sets factory_reset.
     *
     * @param SignalResponseFactoryReset $factory_reset factory_reset
     *
     * @return $this
     */
    public function setFactoryReset($factory_reset)
    {
        $this->container['factory_reset'] = $factory_reset;

        return $this;
    }

    /**
     * Gets jailbroken.
     *
     * @return SignalResponseJailbroken
     */
    public function getJailbroken()
    {
        return $this->container['jailbroken'];
    }

    /**
     * Sets jailbroken.
     *
     * @param SignalResponseJailbroken $jailbroken jailbroken
     *
     * @return $this
     */
    public function setJailbroken($jailbroken)
    {
        $this->container['jailbroken'] = $jailbroken;

        return $this;
    }

    /**
     * Gets frida.
     *
     * @return SignalResponseFrida
     */
    public function getFrida()
    {
        return $this->container['frida'];
    }

    /**
     * Sets frida.
     *
     * @param SignalResponseFrida $frida frida
     *
     * @return $this
     */
    public function setFrida($frida)
    {
        $this->container['frida'] = $frida;

        return $this;
    }

    /**
     * Gets ip_blocklist.
     *
     * @return SignalResponseIpBlocklist
     */
    public function getIpBlocklist()
    {
        return $this->container['ip_blocklist'];
    }

    /**
     * Sets ip_blocklist.
     *
     * @param SignalResponseIpBlocklist $ip_blocklist ip_blocklist
     *
     * @return $this
     */
    public function setIpBlocklist($ip_blocklist)
    {
        $this->container['ip_blocklist'] = $ip_blocklist;

        return $this;
    }

    /**
     * Gets tor.
     *
     * @return SignalResponseTor
     */
    public function getTor()
    {
        return $this->container['tor'];
    }

    /**
     * Sets tor.
     *
     * @param SignalResponseTor $tor tor
     *
     * @return $this
     */
    public function setTor($tor)
    {
        $this->container['tor'] = $tor;

        return $this;
    }

    /**
     * Gets privacy_settings.
     *
     * @return SignalResponsePrivacySettings
     */
    public function getPrivacySettings()
    {
        return $this->container['privacy_settings'];
    }

    /**
     * Sets privacy_settings.
     *
     * @param SignalResponsePrivacySettings $privacy_settings privacy_settings
     *
     * @return $this
     */
    public function setPrivacySettings($privacy_settings)
    {
        $this->container['privacy_settings'] = $privacy_settings;

        return $this;
    }

    /**
     * Gets virtual_machine.
     *
     * @return SignalResponseVirtualMachine
     */
    public function getVirtualMachine()
    {
        return $this->container['virtual_machine'];
    }

    /**
     * Sets virtual_machine.
     *
     * @param SignalResponseVirtualMachine $virtual_machine virtual_machine
     *
     * @return $this
     */
    public function setVirtualMachine($virtual_machine)
    {
        $this->container['virtual_machine'] = $virtual_machine;

        return $this;
    }

    /**
     * Gets vpn.
     *
     * @return SignalResponseVpn
     */
    public function getVpn()
    {
        return $this->container['vpn'];
    }

    /**
     * Sets vpn.
     *
     * @param SignalResponseVpn $vpn vpn
     *
     * @return $this
     */
    public function setVpn($vpn)
    {
        $this->container['vpn'] = $vpn;

        return $this;
    }

    /**
     * Gets proxy.
     *
     * @return SignalResponseProxy
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy.
     *
     * @param SignalResponseProxy $proxy proxy
     *
     * @return $this
     */
    public function setProxy($proxy)
    {
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets tampering.
     *
     * @return SignalResponseTampering
     */
    public function getTampering()
    {
        return $this->container['tampering'];
    }

    /**
     * Sets tampering.
     *
     * @param SignalResponseTampering $tampering tampering
     *
     * @return $this
     */
    public function setTampering($tampering)
    {
        $this->container['tampering'] = $tampering;

        return $this;
    }

    /**
     * Gets high_activity.
     *
     * @return SignalResponseHighActivity
     */
    public function getHighActivity()
    {
        return $this->container['high_activity'];
    }

    /**
     * Sets high_activity.
     *
     * @param SignalResponseHighActivity $high_activity high_activity
     *
     * @return $this
     */
    public function setHighActivity($high_activity)
    {
        $this->container['high_activity'] = $high_activity;

        return $this;
    }

    /**
     * Gets location_spoofing.
     *
     * @return SignalResponseLocationSpoofing
     */
    public function getLocationSpoofing()
    {
        return $this->container['location_spoofing'];
    }

    /**
     * Sets location_spoofing.
     *
     * @param SignalResponseLocationSpoofing $location_spoofing location_spoofing
     *
     * @return $this
     */
    public function setLocationSpoofing($location_spoofing)
    {
        $this->container['location_spoofing'] = $location_spoofing;

        return $this;
    }

    /**
     * Gets suspect_score.
     *
     * @return SignalResponseSuspectScore
     */
    public function getSuspectScore()
    {
        return $this->container['suspect_score'];
    }

    /**
     * Sets suspect_score.
     *
     * @param SignalResponseSuspectScore $suspect_score suspect_score
     *
     * @return $this
     */
    public function setSuspectScore($suspect_score)
    {
        $this->container['suspect_score'] = $suspect_score;

        return $this;
    }

    /**
     * Gets raw_device_attributes.
     *
     * @return SignalResponseRawDeviceAttributes
     */
    public function getRawDeviceAttributes()
    {
        return $this->container['raw_device_attributes'];
    }

    /**
     * Sets raw_device_attributes.
     *
     * @param SignalResponseRawDeviceAttributes $raw_device_attributes raw_device_attributes
     *
     * @return $this
     */
    public function setRawDeviceAttributes($raw_device_attributes)
    {
        $this->container['raw_device_attributes'] = $raw_device_attributes;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
