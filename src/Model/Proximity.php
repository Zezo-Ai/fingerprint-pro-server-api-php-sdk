<?php
/**
 * Proximity.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fingerprint Server API.
 *
 * Fingerprint Server API allows you to search, update, and delete identification events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fingerprint\ServerAPI\Model;

use Fingerprint\ServerAPI\ObjectSerializer;

/**
 * Proximity Class Doc Comment.
 *
 * @category Class
 *
 * @description Proximity ID represents a fixed geographical zone in a discrete global grid within which the device is observed.
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Proximity implements ModelInterface, \ArrayAccess
{
    public const PRECISION_RADIUS_10 = 10;
    public const PRECISION_RADIUS_25 = 25;
    public const PRECISION_RADIUS_65 = 65;
    public const PRECISION_RADIUS_175 = 175;
    public const PRECISION_RADIUS_450 = 450;
    public const PRECISION_RADIUS_1200 = 1200;
    public const PRECISION_RADIUS_3300 = 3300;
    public const PRECISION_RADIUS_8500 = 8500;
    public const PRECISION_RADIUS_22500 = 22500;

    /**
     * The original name of the model.
     *
     */
    protected static string $swaggerModelName = 'Proximity';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerTypes = [
        'id' => 'string',
        'precision_radius' => 'int',
        'confidence' => 'float'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerFormats = [
        'id' => null,
        'precision_radius' => 'int32',
        'confidence' => 'float'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'precision_radius' => 'precisionRadius',
        'confidence' => 'confidence'];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'precision_radius' => 'setPrecisionRadius',
        'confidence' => 'setConfidence'];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'precision_radius' => 'getPrecisionRadius',
        'confidence' => 'getConfidence'];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['precision_radius'] = isset($data['precision_radius']) ? $data['precision_radius'] : null;
        $this->container['confidence'] = isset($data['confidence']) ? $data['confidence'] : null;
    }

    /**
     * Gets the string presentation of the object.
     *
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPrecisionRadiusAllowableValues(): array
    {
        return [
            self::PRECISION_RADIUS_10,
            self::PRECISION_RADIUS_25,
            self::PRECISION_RADIUS_65,
            self::PRECISION_RADIUS_175,
            self::PRECISION_RADIUS_450,
            self::PRECISION_RADIUS_1200,
            self::PRECISION_RADIUS_3300,
            self::PRECISION_RADIUS_8500,
            self::PRECISION_RADIUS_22500,        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['id']) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (null === $this->container['precision_radius']) {
            $invalidProperties[] = "'precision_radius' can't be null";
        }
        $allowedValues = $this->getPrecisionRadiusAllowableValues();
        if (!is_null($this->container['precision_radius']) && !in_array($this->container['precision_radius'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'precision_radius', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (null === $this->container['confidence']) {
            $invalidProperties[] = "'confidence' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id a stable privacy-preserving identifier for a given proximity zone
     *
     * @return $this
     */
    public function setId(string $id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets precision_radius.
     */
    public function getPrecisionRadius(): int
    {
        return $this->container['precision_radius'];
    }

    /**
     * Sets precision_radius.
     *
     * @param int $precision_radius the radius of the proximity zoneâ€™s precision level, in meters
     *
     * @return $this
     */
    public function setPrecisionRadius(int $precision_radius): self
    {
        $allowedValues = $this->getPrecisionRadiusAllowableValues();
        if (!in_array($precision_radius, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'precision_radius', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['precision_radius'] = $precision_radius;

        return $this;
    }

    /**
     * Gets confidence.
     */
    public function getConfidence(): float
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence.
     *
     * @param float $confidence A value between `0` and `1` representing the likelihood that the true device location lies within the mapped proximity zone.   * Scores closer to `1` indicate high confidence that the location is inside the mapped proximity zone.   * Scores closer to `0` indicate lower confidence, suggesting the true location may fall in an adjacent zone.
     *
     * @return $this
     */
    public function setConfidence(float $confidence): self
    {
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in a pretty JSON format.
     *
     */
    public function toPrettyString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
