<?php
/**
 * SupplementaryID.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fingerprint Server API.
 *
 * Fingerprint Server API allows you to search, update, and delete identification events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fingerprint\ServerAPI\Model;

use Fingerprint\ServerAPI\ObjectSerializer;

/**
 * SupplementaryID Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SupplementaryID implements ModelInterface, \ArrayAccess
{
    /**
     * The original name of the model.
     *
     */
    protected static string $swaggerModelName = 'SupplementaryID';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerTypes = [
        'visitor_id' => 'string',
        'visitor_found' => 'bool',
        'confidence' => '\Fingerprint\ServerAPI\Model\IdentificationConfidence',
        'first_seen_at' => '\Fingerprint\ServerAPI\Model\IdentificationSeenAt',
        'last_seen_at' => '\Fingerprint\ServerAPI\Model\IdentificationSeenAt'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerFormats = [
        'visitor_id' => null,
        'visitor_found' => null,
        'confidence' => null,
        'first_seen_at' => null,
        'last_seen_at' => null];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'visitor_id' => 'visitorId',
        'visitor_found' => 'visitorFound',
        'confidence' => 'confidence',
        'first_seen_at' => 'firstSeenAt',
        'last_seen_at' => 'lastSeenAt'];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'visitor_id' => 'setVisitorId',
        'visitor_found' => 'setVisitorFound',
        'confidence' => 'setConfidence',
        'first_seen_at' => 'setFirstSeenAt',
        'last_seen_at' => 'setLastSeenAt'];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'visitor_id' => 'getVisitorId',
        'visitor_found' => 'getVisitorFound',
        'confidence' => 'getConfidence',
        'first_seen_at' => 'getFirstSeenAt',
        'last_seen_at' => 'getLastSeenAt'];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['visitor_id'] = isset($data['visitor_id']) ? $data['visitor_id'] : null;
        $this->container['visitor_found'] = isset($data['visitor_found']) ? $data['visitor_found'] : null;
        $this->container['confidence'] = isset($data['confidence']) ? $data['confidence'] : null;
        $this->container['first_seen_at'] = isset($data['first_seen_at']) ? $data['first_seen_at'] : null;
        $this->container['last_seen_at'] = isset($data['last_seen_at']) ? $data['last_seen_at'] : null;
    }

    /**
     * Gets the string presentation of the object.
     *
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets visitor_id.
     */
    public function getVisitorId(): ?string
    {
        return $this->container['visitor_id'];
    }

    /**
     * Sets visitor_id.
     *
     * @param ?string $visitor_id string of 20 characters that uniquely identifies the visitor's browser or mobile device
     *
     * @return $this
     */
    public function setVisitorId(?string $visitor_id): self
    {
        $this->container['visitor_id'] = $visitor_id;

        return $this;
    }

    /**
     * Gets visitor_found.
     */
    public function getVisitorFound(): ?bool
    {
        return $this->container['visitor_found'];
    }

    /**
     * Sets visitor_found.
     *
     * @param ?bool $visitor_found attribute represents if a visitor had been identified before
     *
     * @return $this
     */
    public function setVisitorFound(?bool $visitor_found): self
    {
        $this->container['visitor_found'] = $visitor_found;

        return $this;
    }

    /**
     * Gets confidence.
     */
    public function getConfidence(): ?IdentificationConfidence
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence.
     *
     * @param ?\Fingerprint\ServerAPI\Model\IdentificationConfidence $confidence confidence
     *
     * @return $this
     */
    public function setConfidence(?IdentificationConfidence $confidence): self
    {
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets first_seen_at.
     */
    public function getFirstSeenAt(): ?IdentificationSeenAt
    {
        return $this->container['first_seen_at'];
    }

    /**
     * Sets first_seen_at.
     *
     * @param ?\Fingerprint\ServerAPI\Model\IdentificationSeenAt $first_seen_at first_seen_at
     *
     * @return $this
     */
    public function setFirstSeenAt(?IdentificationSeenAt $first_seen_at): self
    {
        $this->container['first_seen_at'] = $first_seen_at;

        return $this;
    }

    /**
     * Gets last_seen_at.
     */
    public function getLastSeenAt(): ?IdentificationSeenAt
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at.
     *
     * @param ?\Fingerprint\ServerAPI\Model\IdentificationSeenAt $last_seen_at last_seen_at
     *
     * @return $this
     */
    public function setLastSeenAt(?IdentificationSeenAt $last_seen_at): self
    {
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in a pretty JSON format.
     *
     */
    public function toPrettyString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
