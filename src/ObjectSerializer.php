<?php
/**
 * ObjectSerializer.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fingerprint Pro Server API.
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fingerprint\ServerAPI;

use DateTime;

/**
 * ObjectSerializer Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ObjectSerializer
{
    /**
     * Serialize data.
     *
     * @param mixed       $data   the data to serialize
     * @param null|string $format the format of the Swagger type of the data
     *
     * @return array|object|string serialized form of $data
     */
    public static function sanitizeForSerialization(mixed $data, ?string $format = null): array|object|string
    {
        if (is_scalar($data) || null === $data) {
            return $data;
        }
        if ($data instanceof \DateTime) {
            return ('date' === $format) ? $data->format('Y-m-d') : $data->format(\DateTime::ATOM);
        }
        if (is_array($data)) {
            foreach ($data as $property => $value) {
                $data[$property] = self::sanitizeForSerialization($value);
            }

            return $data;
        }
        if ($data instanceof \stdClass) {
            foreach ($data as $property => $value) {
                $data->{$property} = self::sanitizeForSerialization($value);
            }

            return $data;
        }
        if (is_object($data)) {
            $values = [];
            $formats = $data::swaggerFormats();
            foreach ($data::swaggerTypes() as $property => $swaggerType) {
                $getter = $data::getters()[$property];
                $value = $data->{$getter}();
                if (null !== $value
                    && !in_array($swaggerType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)
                    && method_exists($swaggerType, 'getAllowableEnumValues')
                    && !in_array($value, $swaggerType::getAllowableEnumValues())) {
                    $imploded = implode("', '", $swaggerType::getAllowableEnumValues());

                    throw new \InvalidArgumentException("Invalid value for enum '{$swaggerType}', must be one of: '{$imploded}'");
                }
                if (null !== $value) {
                    $values[$data::attributeMap()[$property]] = self::sanitizeForSerialization($value, $swaggerType, $formats[$property]);
                }
            }

            return (object) $values;
        }

        return (string) $data;
    }

    /**
     * Sanitize filename by removing path.
     * e.g. ../../sun.gif becomes sun.gif.
     *
     * @param string $filename filename to be sanitized
     *
     * @return string the sanitized filename
     */
    public static function sanitizeFilename(string $filename): string
    {
        if (preg_match('/.*[\/\\\](.*)$/', $filename, $match)) {
            return $match[1];
        }

        return $filename;
    }

    /**
     * Take value and turn it into a string suitable for inclusion in
     * the path, by url-encoding.
     *
     * @param string $value a string which will be part of the path
     *
     * @return string the serialized object
     */
    public static function toPathValue(string $value): string
    {
        return rawurlencode(self::toString($value));
    }

    /**
     * Take value and turn it into a string suitable for inclusion in
     * the query, by imploding comma-separated if it's an object.
     * If it's a string, pass through unchanged. It will be url-encoded
     * later.
     *
     * @param \DateTime|string|string[] $object an object to be serialized to a string
     * @param null|string               $format the format of the parameter
     *
     * @return string the serialized object
     */
    public static function toQueryValue(array|\DateTime|string $object, ?string $format = null): string
    {
        if (is_array($object)) {
            return implode(',', $object);
        }

        return self::toString($object, $format);
    }

    /**
     * Take value and turn it into a string suitable for inclusion in
     * the header. If it's a string, pass through unchanged
     * If it's a datetime object, format it in RFC3339.
     *
     * @param string $value a string which will be part of the header
     *
     * @return string the header string
     */
    public static function toHeaderValue(string $value): string
    {
        return self::toString($value);
    }

    /**
     * Take value and turn it into a string suitable for inclusion in
     * the http body (form parameter). If it's a string, pass through unchanged
     * If it's a datetime object, format it in RFC3339.
     *
     * @param \SplFileObject|string $value the value of the form parameter
     *
     * @return string the form string
     */
    public static function toFormValue(\SplFileObject|string $value): string
    {
        if ($value instanceof \SplFileObject) {
            return $value->getRealPath();
        }

        return self::toString($value);
    }

    /**
     * Take value and turn it into a string suitable for inclusion in
     * the parameter. If it's a string, pass through unchanged
     * If it's a datetime object, format it in RFC3339
     * If it's a date, format it in Y-m-d.
     *
     * @param \DateTime|string $value  the value of the parameter
     * @param null|string      $format the format of the parameter
     *
     * @return string the header string
     */
    public static function toString(\DateTime|string $value, ?string $format = null): string
    {
        if ($value instanceof \DateTime) {
            return ('date' === $format) ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
        }

        return $value;
    }

    /**
     * Serialize an array to a string.
     *
     * @param array  $collection                 collection to serialize to a string
     * @param string $collectionFormat           the format use for serialization (csv,
     *                                           ssv, tsv, pipes, multi)
     * @param bool   $allowCollectionFormatMulti allow collection format to be a multidimensional array
     */
    public static function serializeCollection(array $collection, string $collectionFormat, ?bool $allowCollectionFormatMulti = false): string
    {
        if ($allowCollectionFormatMulti && ('multi' === $collectionFormat)) {
            // http_build_query() almost does the job for us. We just
            // need to fix the result of multidimensional arrays.
            return preg_replace('/%5B[0-9]+%5D=/', '=', http_build_query($collection, '', '&'));
        }

        return match ($collectionFormat) {
            'pipes' => implode('|', $collection),
            'tsv' => implode("\t", $collection),
            'ssv' => implode(' ', $collection),
            default => implode(',', $collection),
        };
    }

    /**
     * Deserialize a JSON string into an object.
     *
     * @param mixed    $data        object or primitive to be deserialized
     * @param string   $class       class name is passed as a string
     * @param string[] $httpHeaders HTTP headers
     *
     * @throws \Exception
     */
    public static function deserialize(mixed $data, string $class, ?array $httpHeaders = null): mixed
    {
        if (null === $data) {
            return null;
        }
        if (str_starts_with($class, 'map[')) { // for associative array e.g. map[string,int]
            $inner = substr($class, 4, -1);
            $deserialized = [];
            if (false !== strrpos($inner, ',')) {
                $subClass_array = explode(',', $inner, 2);
                $subClass = $subClass_array[1];
                foreach ($data as $key => $value) {
                    $deserialized[$key] = self::deserialize($value, $subClass, null);
                }
            }

            return $deserialized;
        }
        if (0 === strcasecmp(substr($class, -2), '[]')) {
            $subClass = substr($class, 0, -2);
            $values = [];
            foreach ($data as $key => $value) {
                $values[] = self::deserialize($value, $subClass, null);
            }

            return $values;
        }
        if ('object' === $class || '\Fingerprint\ServerAPI\Model\RawDeviceAttributesResult' === $class) {
            settype($data, 'array');

            return $data;
        }
        if ('\DateTime' === $class) {
            // Some API's return an invalid, empty string as a
            // date-time property. DateTime::__construct() will return
            // the current time for empty input which is probably not
            // what is meant. The invalid empty string is probably to
            // be interpreted as a missing field/value. Let's handle
            // this graceful.
            if (!empty($data)) {
                return new \DateTime($data);
            }

            return null;
        }
        if (in_array($class, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)) {
            $originalData = $data;
            $normalizedClass = strtolower($class);

            switch ($normalizedClass) {
                case 'int':
                    $normalizedClass = 'integer';

                    break;

                case 'bool':
                    $normalizedClass = 'boolean';

                    break;
            }
            if ('float' === $normalizedClass && is_numeric($originalData)) {
                return (float) $originalData;
            }
            if ('string' === $normalizedClass && is_object($data)) {
                throw new \Exception('Cannot convert object to string');
            }

            settype($data, $class);
            if (gettype($data) === $normalizedClass) {
                return $data;
            }

            throw new \Exception('Serialization error: Could not convert '.gettype($originalData).' to '.$class);
        } elseif (method_exists($class, 'getAllowableEnumValues')) {
            if (!in_array($data, $class::getAllowableEnumValues())) {
                $imploded = implode("', '", $class::getAllowableEnumValues());

                throw new \InvalidArgumentException("Invalid value for enum '{$class}', must be one of: '{$imploded}'");
            }

            return $data;
        }

        $instance = new $class();
        foreach ($instance::swaggerTypes() as $property => $type) {
            $propertySetter = $instance::setters()[$property];

            if (!isset($propertySetter) || !isset($data->{$instance::attributeMap()[$property]})) {
                continue;
            }

            $propertyValue = $data->{$instance::attributeMap()[$property]};
            if (isset($propertyValue)) {
                $instance->{$propertySetter}(self::deserialize($propertyValue, $type, null));
            }
        }

        return $instance;
    }
}
